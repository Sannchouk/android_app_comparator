import{ao as n,f as e,g as t,a2 as o,w as i}from"./main.js";const r={fetch:function(e){return n.get(`${s}.${e}`)},save:function(e,t){return n.set(`${s}.${e}`,t)},clean:function(e){return n.remove(`${s}.${e}`)}},s="offlinePuzzlesV2";function a(n){return e(`/training/${n.id}/round2`,{method:"POST",body:JSON.stringify({win:n.win})})}function u(n,t){return e(`/training/${n}/vote`,{method:"POST",body:JSON.stringify({vote:t?1:0})})}function c(n){return e(`/training/${n}/load`,{cache:"reload"})}function l(){return e("/training/new")}function d(n,e){return f(n,e).catch((()=>b((()=>m(n,e)))))}function f(n,e){return b((()=>n.fetch(e.id)))}function h(n,e){return n.fetch(e.id).then((n=>n&&n.unsolved||[]))}function g(n,e){return n.fetch(e.id).then((n=>n&&n.unsolved.length||0))}function v(n,e,t){return n.fetch(e.id).then((o=>o?n.save(e.id,Object.assign(Object.assign({},o),{solved:o.solved.concat([{id:t.id,win:t.win}]),unsolved:o.unsolved.filter((n=>n.puzzle.id!==t.id))})).then((()=>m(n,e))):null))}function z(n,e){return m(n,e).then((()=>n.clean(e.id).then((()=>d(n,e)))))}function p(n){"string"==typeof n?o.show({text:n,position:"center",duration:"long"}):o.show({text:"Could not load puzzle",position:"center",duration:"short"}),i.set("/")}function m(n,o){return n.fetch(o.id).then((i=>{const r=i?i.unsolved:[],s=i?i.solved:[],a=Math.max(t.training.puzzleBufferLen-r.length,0),u=s.length>0?(c=s,e("/training/batch",{method:"POST",body:JSON.stringify({solutions:c})})):Promise.resolve();var c;const l=r.map((n=>n.puzzle.id)),d=l.length>0?Math.max(...l):void 0;return u.then((()=>!i||a>0?e("/training/batch",{method:"GET",query:{nb:a,after:d},cache:"reload"}):Promise.resolve({puzzles:[],user:i.user}))).then((e=>n.save(o.id,{user:e.user,unsolved:r.concat(e.puzzles),solved:[]}))).catch((()=>i))}))}function b(n){return new Promise(((e,o)=>{n().then((n=>{n&&n.unsolved.length>0?e(n.unsolved[0]):o(`No additional offline puzzle available. Go online to get another ${t.training.puzzleBufferLen}`)})).catch(o)}))}export{d as a,v as b,g as c,r as d,c as e,h as g,f as l,l as n,p,a as r,z as s,u as v};
